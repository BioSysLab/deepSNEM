emb <- emb[,-1]
colnames(emb)[1] <- "emb"
emb <- emb %>% mutate(emb = str_remove_all(string = emb,pattern = ".csv"))
emb$emb[1]
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb %>% mutate(emb = str_remove_all(string = emb,pattern = ".csv"))
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
View(file_info)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb$emb[1]
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
length(unique(file_info$sig_id))
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
install.packages("clustree")
install.packages("clustree")
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info_dups <- readRDS("data/graph_info_df/file_info_dups.rds")
###
distance_type = "cosine"
###
output_dir <- "validation/validation_autoencoder_graph/graph_autoencoder_64"
###
output_dir <- "validation/validation_graph2vec/g2v_clust_500"
ds_path <- "C:/Users/user/Documents/phd/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
library(tidyverse)
landmark <- read_tsv(file = "data/cmap/util_files/cmap_landmark_genes.txt")
sig_mapping <- readRDS("data/graph_info_df/sig_mapping.rds")
test <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(test)[1] <- "emb"
emb$emb[1]
test$emb[1]
sims <- readRDS("data/rdkit/rdkit_sims.rds")
# test is a dataframe where there is a column emb which is in the
# form of the column emb of file info
# file info, dataframe
# distance, character string, either "cosine" or "euclidian"
library(tidyverse)
library(lsa)
library(Rtsne)
library(umap)
# keep some columns of file_info
file_info <- file_info %>% dplyr::select(-c(distil_id,distil_cc_q75,distil_nsample,distil_ss,median_drug_ranks,ngenes_modulated_up_lm,
ngenes_modulated_dn_lm,tas,pct_self_rank_q25,is_exemplar,myc_ranks,counts,count.y))
ids_keep <- which(file_info$emb %in% test$emb)
file_info <- file_info[ids_keep,]
sig_counts <- file_info %>% group_by(sig_id) %>% summarize(count_per_sig = n())
file_info <- left_join(file_info,sig_counts)
file_info_dups$identifier <- as.character(file_info_dups$identifier)
file_info_t1 <- file_info %>% filter(count_per_sig > 1)
sigs <- unique(as.character(file_info_t1$sig_id))
if (distance_type == "cosine") {
# cosine is normalized to 0-1 universally
distance_function <- function(df){
cos <- cosine(t(df[,-1]),y = NULL)
cos <- (cos + 1)/(2)
cos_dist <- 1-cos
cos_dist[lower.tri(cos_dist,diag = T)] <- 666
rownames(cos_dist) <- as.character(df$emb)
colnames(cos_dist) <- as.character(df$emb)
cos_dist <- reshape2::melt(cos_dist)
cos_dist <- cos_dist %>% filter(value != 666)
return(cos_dist)
}
}
if (distance_type == "euclidian") {
#this is unnormalized
distance_function <- function(df){
eu_dist <- dist(df[,-1])
eu_dist <- as.matrix(eu_dist)
eu_dist[lower.tri(eu_dist,diag = T)] <- 666
rownames(eu_dist) <- as.character(df$emb)
colnames(eu_dist) <- as.character(df$emb)
eu_dist <- reshape2::melt(eu_dist)
eu_dist <- eu_dist %>% filter(value != 666)
return(eu_dist)
}
}
sampled_sigs <- sample(sigs,100)
all_sampled_dists <- NULL
file_info_t1$sig_id <- as.character(file_info_t1$sig_id)
for (i in 1:length(sampled_sigs)) {
filt <- file_info_t1 %>% filter(sig_id == sampled_sigs[i])
df <- test[which(test$emb %in% filt$emb),]
sig_dists <- distance_function(df = df)
all_sampled_dists <- rbind(sig_dists,all_sampled_dists)
}
random_sigs <- sample(sigs,round(sqrt(2*nrow(all_sampled_dists))))
all_random_dists <- NULL
ids_random_sigs <- which(file_info_t1$sig_id %in% random_sigs)
random_info <- file_info_t1[ids_random_sigs,]
random_info <- random_info %>% group_by(sig_id) %>% filter(emb == emb[1])
ids_random_emb <- which(test$emb %in% random_info$emb)
random_emb <- test[ids_random_emb,]
all_random_dists <- distance_function(random_emb)
ttest <- t.test(x = all_sampled_dists$value,all_random_dists$value)
multi2 <- function (x, col = palette(), lwd = 1, lty = 1, xlim, ylim,ylab = "Density",
...)
{
if (missing(xlim)) {
xvals <- unlist(lapply(x, function(z) {
range(z[is.finite(z)], na.rm = TRUE)
}))
xlim <- range(xvals[is.finite(xvals)])
}
dens <- lapply(x, function(x) {
density(x[is.finite(x)])
})
yvals <- unlist(lapply(dens, function(x) {
x$y
}))
plot(0, type = "n", xlim = xlim, ylim = ylim, ylab = ylab,
...)
out <- mapply(dens, rep(col, length = length(dens)), rep(lwd,
length = length(dens)), rep(lty, length = length(dens)),
FUN = function(x, col, lwd, lty) {
lines(x, col = col, lwd = lwd, lty = lty)
})
}
file_info_tsne_1 <- file_info_t1[which(file_info_t1$sig_id %in% sampled_sigs),]
sampled_sigs <- as.data.frame(sampled_sigs)
sampled_sigs$label <- c(rep(1,90),2:11)
file_info_tsne_1 <- left_join(file_info_tsne_1,sampled_sigs, by = c("sig_id"="sampled_sigs"))
file_info_labels <- file_info_tsne_1 %>% dplyr::select(emb,label)
emb_tsne <- test[which(test$emb %in% file_info_labels$emb),]
emb_tsne <- left_join(emb_tsne,file_info_labels,by=c("emb"="emb"))
emb_tsne$label <- as.factor(emb_tsne$label)
tsne <- Rtsne(emb_tsne[,-c(1,ncol(emb_tsne))], dims = 2, perplexity = 50, verbose=TRUE, max_iter = 1000)
df <- data.frame(V1 = tsne$Y[,1], V2 =tsne$Y[,2], label = emb_tsne$label)
map <- umap(emb_tsne[,-c(1,ncol(emb_tsne))])
df_map <- data.frame(V1 = map$layout[,1], V2 = map$layout[,2], label = emb_tsne$label)
identifier <- unique(as.character(file_info_dups$identifier))
dup_distances <- NULL
for (i in 1:length(identifier)) {
filt <- file_info_dups[which(file_info_dups$identifier %in% identifier[i]),]
sigs_iden <- unique(as.character(filt$sig_id))
for (j in 1:10) {
dup_embs <- NULL
for (k in 1:length(sigs_iden)) {
filt2 <- filt %>% filter(sig_id == sigs_iden[k])
filt_embs <- test[which(test$emb %in% filt2$emb),]
dup_emb <- sample_n(filt_embs,1)
dup_embs <- rbind(dup_emb,dup_embs)
}
dup_distance <- distance_function(dup_embs)
dup_distances <- rbind(dup_distance,dup_distances)
}
}
sigs <- unique(as.character(file_info$sig_id))
sigs_random <- sample(sigs,35)
random_embs <- NULL
for (i in 1:length(sigs_random)) {
filt <- file_info %>% filter(sig_id == sigs_random[i])
random_emb <- sample_n(test[which(test$emb %in% filt$emb),],1)
random_embs <- rbind(random_emb,random_embs)
}
random_distances <- distance_function(random_embs)
# Task 2 TSNE
task2_tsne <- file_info_dups[which(file_info_dups$identifier %in% identifier),]
task2_tsne_labels <- task2_tsne %>% dplyr::select(emb,identifier)
task2_tsne <- task2_tsne %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
task2_tsne_labels <- task2_tsne %>% dplyr::select(emb,identifier)
emb_task2_tsne <- test[which(test$emb %in% task2_tsne$emb),]
emb_task2_tsne <- left_join(emb_task2_tsne,task2_tsne_labels)
emb_task2_tsne$identifier <- as.factor(emb_task2_tsne$identifier)
# Task 2 TSNE
task2_tsne <- file_info_dups[which(file_info_dups$identifier %in% identifier),]
task2_tsne <- task2_tsne[which(as.character(task2_tsne$emb) %in% as.character(test$emb)),]
task2_tsne <- task2_tsne %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
task2_tsne_labels <- task2_tsne %>% dplyr::select(emb,identifier)
emb_task2_tsne <- test[which(test$emb %in% task2_tsne$emb),]
emb_task2_tsne <- left_join(emb_task2_tsne,task2_tsne_labels)
emb_task2_tsne$identifier <- as.factor(emb_task2_tsne$identifier)
tsne2 <- Rtsne(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))], dims = 2, perplexity=10, verbose=TRUE, max_iter = 1000)
tsne2 <- Rtsne(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))], dims = 2, perplexity=10, verbose=TRUE, max_iter = 3000)
g <- NULL
for (i in 1:25) {
labels <- emb_task2_tsne$identifier
labels <- as.data.frame(labels)
labels$label <- 1
labels$label[which(labels$labels %in% identifier[i])] <- 999
labels$label <- as.factor(labels$label)
df2 <- data.frame(V1 = tsne2$Y[,1], V2 =tsne2$Y[,2], label = labels$label)
g2 <- ggplot(df2, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
g[[i]] <- g2
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_tnse.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = g,nrow = 5)
dev.off()
# UMAP task 2
umap2 <- umap(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))])
gmap <- NULL
for (i in 1:25) {
labels <- emb_task2_tsne$identifier
labels <- as.data.frame(labels)
labels$label <- 1
labels$label[which(labels$labels %in% identifier[i])] <- 999
labels$label <- as.factor(labels$label)
df2 <- data.frame(V1 = umap2$layout[,1], V2 =umap2$layout[,2], label = labels$label)
g2map <- ggplot(df2, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
gmap[[i]] <- g2map
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_umap.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = gmap,nrow = 5)
dev.off()
tsne2 <- Rtsne(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))], dims = 2, perplexity=5, verbose=TRUE, max_iter = 3000)
g <- NULL
for (i in 1:25) {
labels <- emb_task2_tsne$identifier
labels <- as.data.frame(labels)
labels$label <- 1
labels$label[which(labels$labels %in% identifier[i])] <- 999
labels$label <- as.factor(labels$label)
df2 <- data.frame(V1 = tsne2$Y[,1], V2 =tsne2$Y[,2], label = labels$label)
g2 <- ggplot(df2, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
g[[i]] <- g2
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_tnse.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = g,nrow = 5)
dev.off()
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
test <- kmeans(scale(emb[,-1]),centers = 5,nstart = 20)
test$totss
test$withinss
test$size
test$cluster
length(test$cluster)
k <- seq(5,30,5)
k <- seq(5,30,5)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k,nstart = 20)
emb <- cbind(emb,test)
}
k <- seq(5,30,5)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k,nstart = 20)
emb <- cbind(emb,test$cluster)
}
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
emb <- cbind(emb,test$cluster)
}
colnames(emb)[135]
clusters <- as.data.frame(test$cluster)
colnames(clusters) <- paste0("k",k[i])
View(clusters)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
k <- seq(5,30,5)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
clusters <- as.data.frame(test$cluster)
colnames(clusters) <- paste0("k",k[i])
emb <- cbind(emb,clusters)
}
clustree(emb, prefix = "k")
library(clustree)
clustree(emb, prefix = "k")
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
k <- seq(1,5)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
clusters <- as.data.frame(test$cluster)
colnames(clusters) <- paste0("k",k[i])
emb <- cbind(emb,clusters)
}
k <- seq(1,5)
i <- 1
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
k <- seq(2,5)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
clusters <- as.data.frame(test$cluster)
colnames(clusters) <- paste0("k",k[i])
emb <- cbind(emb,clusters)
}
test <- kmeans(scale(emb[,-1]),centers = 2,nstart = 20)
test <- kmeans(scale(emb[,-1]),centers = 5,nstart = 20)
library(tidyverse)
library(clustree)
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
k <- seq(1,5)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
clusters <- as.data.frame(test$cluster)
colnames(clusters) <- paste0("k",k[i])
emb <- cbind(emb,clusters)
}
test <- stats::kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
library(tidyverse)
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
k <- seq(1,5)
for (i in 1:length(k)) {
test <- stats::kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
clusters <- as.data.frame(test$cluster)
colnames(clusters) <- paste0("k",k[i])
emb <- cbind(emb,clusters)
}
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
library(tidyverse)
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
emb <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
colnames(emb)[1] <- "emb"
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
k <- seq(1,5)
clusters <- NULL
for (i in 1:length(k)) {
test <- stats::kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
cluster <- as.data.frame(test$cluster)
colnames(cluster) <- paste0("k",k[i])
clusters <- cbind(clusters,cluster)
}
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 20)
cluster <- as.data.frame(test$cluster)
colnames(cluster) <- paste0("k",k[i])
clusters <- cbind(clusters,cluster)
}
test <- kmeans(scale(emb[,-1]),centers =1,nstart = 20)
cluster <- as.data.frame(test$cluster)
colnames(cluster) <- paste0("k",k[i])
clusters <- cbind(clusters,cluster)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
k <- seq(1,5)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =1,nstart = 20)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
colnames(clusters)[1]
colnames(clusters)[1] <- "gg"
View(cluster)
View(clusters)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k),dimnames = as.character(k))
colnames(clusters) <- as.character(k)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
clustree(clusters, prefix = "k")
library(clustree)
clustree(clusters, prefix = "k")
k <- seq(1,10)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
k <- seq(1,10)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 30)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
clustree(clusters, prefix = "k")
k <- seq(1,13)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 30)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
clustree(clusters, prefix = "k")
k <- seq(1,20)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 40)
k <- seq(1,20)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 40)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
clustree(clusters, prefix = "k")
k <- seq(1,30)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 40)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
}
png(file="clustree.png",width=12,height=12,units = "in",res=300)
clustree(clusters, prefix = "k")
dev.off()
wss <- NULL
k <- seq(1,30)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
wss <- NULL
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 40)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
wss[i] <- test$tot.withinss
}
plot(k,wss)
k <- seq(1,60)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
wss <- NULL
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers =k[i],nstart = 20,iter.max = 40)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
wss[i] <- test$tot.withinss
}
?kmeans
k <- seq(1,60)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
wss <- NULL
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 50,iter.max = 40)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
wss[i] <- test$tot.withinss
}
plot(k,wss)
scale(emb[,-1])
library(tidyverse)
files <- list.files(path = "C:/Users/user/Documents/deepCAGE/graphs",recursive = T,full.names = T)
files <- as.data.frame(files)
files <- files %>%
mutate(meas = grepl(pattern = "meas_",x = files),
log = grepl(pattern = ".log",x = files),
time = grepl(pattern = "elapsed_time.txt",x = files),
res = grepl(pattern = "results_CARNIVAL.Rdata",x = files),
empty = grepl(pattern = "emptyNetwork",x = files))
files_nets <-  files %>% filter(meas == F & log == F & time == F & res == F & empty == F)
#
match_weight <- c("nodesAttributes_1.txt","weightedModel_1.txt")
files_nets <- files_nets %>% select(files) %>%
mutate(weighted = grepl(pattern = paste(match_weight,collapse = "|"),x = files))
files_nets_weighted <- files_nets %>% filter(weighted == T)
15716/2
7722+136
files_nets_weighted <-  files_nets_weighted %>% mutate(type = if_else(condition = grepl(pattern = "Attributes",x = files),true = "nodes",false = "edges"))
files_nets_weighted <- files_nets_weighted %>% select(-weighted)
files_nets_weighted <- files_nets_weighted %>%
mutate(sig_id = qdapRegex::ex_between(files, "/", "/") ) %>%
mutate(sig_id = sapply(sig_id, "[", 2)) %>% unique() %>% mutate(sig_id = str_trim(sig_id))
weights <- files_nets_weighted %>% select(files,sig_id) %>% group_by(sig_id) %>%
summarise(count = n()) %>% arrange(count) %>% mutate(count = count/2)
files_nets_weighted <- left_join(files_nets_weighted,weights)
View(files_nets_weighted)
sig_ids <- files_nets_weighted %>% select(sig_id,count) %>% unique()
View(sig_ids)
View(files_nets_weighted)
