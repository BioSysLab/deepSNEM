identifier <- unique(as.character(file_info_dups$identifier))
dup_distances <- NULL
for (i in 1:length(identifier)) {
filt <- file_info_dups[which(file_info_dups$identifier %in% identifier[i]),]
sigs_iden <- unique(as.character(filt$sig_id))
for (j in 1:10) {
dup_embs <- NULL
for (k in 1:length(sigs_iden)) {
filt2 <- filt %>% filter(sig_id == sigs_iden[k])
filt_embs <- test[which(test$emb %in% filt2$emb),]
dup_emb <- sample_n(filt_embs,1)
dup_embs <- rbind(dup_emb,dup_embs)
}
if (nrow(dup_embs)>1) {
dup_distance <- distance_function(dup_embs)
dup_distances <- rbind(dup_distance,dup_distances)
}
}
}
sigs <- unique(as.character(file_info$sig_id))
sigs_random <- sample(sigs,35)
random_embs <- NULL
for (i in 1:length(sigs_random)) {
filt <- file_info %>% filter(sig_id == sigs_random[i])
random_emb <- sample_n(test[which(test$emb %in% filt$emb),],1)
random_embs <- rbind(random_emb,random_embs)
}
random_distances <- distance_function(random_embs)
# write results task 2
b <- max(c(density(dup_distances$value)$y,density(random_distances$value)$y))
dir.create(paste0(output_dir,"/task2"),recursive = T)
png(file=paste0(output_dir,"/task2/","task2_duplicate_vs_random_sig_id.png"),width=7,height=6,units = "in",res=300)
multi2(list(dup_distances$value,random_distances$value),xlab = "Distance", xaxs="i",yaxs="i",ylim = c(0,b+0.01))
title("B", adj = 0)
legend("topright",
legend = c("graphs from duplicate perts", "random graphs"),
col = c('black',
'red'),
lty = c(1,1),
bty = "o",
pt.cex = 1.5,
cex = 0.8,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
dev.off()
output_task2 <- data.frame(matrix(0,nrow = 1, ncol = 6))
colnames(output_task2) <- c("mean_same","sd_same","n_same","mean_random","sd_random","n_random")
output_task2$mean_same <- mean(dup_distances$value,na.rm=T)
output_task2$sd_same <- sd(dup_distances$value,na.rm=T)
output_task2$n_same <- nrow(dup_distances)
output_task2$mean_random <- mean(random_distances$value,na.rm=T)
output_task2$sd_random <- sd(random_distances$value,na.rm=T)
output_task2$n_random <- nrow(random_distances)
write.csv(output_task2,paste0(output_dir,"/task2/","task2_stats.csv"))
# Task 2 TSNE
task2_tsne <- file_info_dups[which(file_info_dups$identifier %in% identifier),]
task2_tsne <- task2_tsne[which(as.character(task2_tsne$emb) %in% as.character(test$emb)),]
task2_tsne <- task2_tsne %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
task2_tsne_labels <- task2_tsne %>% dplyr::select(emb,identifier)
emb_task2_tsne <- test[which(test$emb %in% task2_tsne$emb),]
emb_task2_tsne <- left_join(emb_task2_tsne,task2_tsne_labels)
emb_task2_tsne$identifier <- as.factor(emb_task2_tsne$identifier)
tsne2 <- Rtsne(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))], dims = 2, perplexity=5, verbose=TRUE, max_iter = 1000,check_duplicates = F)
g <- NULL
for (i in 1:25) {
labels <- emb_task2_tsne$identifier
labels <- as.data.frame(labels)
labels$label <- "non duplicate"
labels$label[which((labels$labels %in% identifier[i]))] <- "duplicate"
labels$label <- factor(labels$label,levels=c("non duplicate","duplicate"))
df2 <- data.frame(V1 = tsne2$Y[,1], V2 =tsne2$Y[,2], label = labels$label)
g2 <- ggplot(df2 %>% mutate(label == "non duplicate") %>% arrange(label), aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
g[[i]] <- g2
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_tnse.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = g,nrow = 5)
dev.off()
# UMAP task 2
umap2 <- umap(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))])
gmap <- NULL
for (i in 1:25) {
labels <- emb_task2_tsne$identifier
labels <- as.data.frame(labels)
labels$label <- "duplicate"
labels$label[which(!(labels$labels %in% identifier[i]))] <- "non duplicate"
labels$label <- factor(labels$label,levels=c("non duplicate","duplicate"))
df2 <- data.frame(V1 = umap2$layout[,1], V2 =umap2$layout[,2], label = labels$label)
g2map <- ggplot(df2 %>% mutate(label == "duplicate") %>% arrange(label), aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
gmap[[i]] <- g2map
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_umap.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = gmap,nrow = 5)
dev.off()
library(tidyverse)
library(doFuture)
# parallel set number of workers
registerDoFuture()
plan(multiprocess,workers = 6)
# load functions
prepape_embs <- function(emb, type = "unweighted", file_info, labels, keep_one, ave, n_emb){
library(tidyverse)
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
# remove duplicate sig id embeddings
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
# add sig id info to embs
emb <- left_join(emb,file_info,by=c("emb"="emb"))
# add label info to embs
labels <- labels %>% group_by(moa_v1) %>% mutate(count = n_distinct(rdkit_graph)) %>% ungroup()
labels <- labels %>% group_by(rdkit_graph) %>% filter(count == max(count)) %>% ungroup()
labels <- labels %>% group_by(rdkit_graph) %>% sample_n(1) %>% ungroup()
emb <- left_join(emb,labels,by = c("rdkit"="rdkit_graph"))
# keep one emb for each sig id
if (keep_one) {
emb <- emb %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
}
if (ave) {
aver <- aggregate(emb[, 2:(n_emb+1)], list(emb$sig_id), mean)
file_info_1 <- file_info %>% dplyr::select(sig_id,rdkit) %>% unique()
emb <- left_join(aver,file_info_1,by = c("Group.1"="sig_id"))
emb <- left_join(emb,labels,by = c("rdkit"="rdkit_graph"))
colnames(emb)[1] <- "sig_id"
}
return(emb)
}
prepare_test_embs <- function(test_embs,test_df,ave_drug,ave_sig,emb_n,keep_one){
test_embs <- left_join(test_embs,test_df,by = "emb")
if (ave_sig) {
aver <- aggregate(test_embs[, 2:(emb_n+1)], list(test_embs$sig_id), mean)
test_df2 <- test_df %>% dplyr::select(sig_id,test_rdkit,cell_id,moa_v1,pert_iname) %>% unique()
test_embs <- left_join(aver,test_df2,by = c("Group.1"="sig_id"))
colnames(test_embs)[1] <- "sig_id"
}
if (keep_one) {
test_embs <- test_embs %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
}
test_embs <- test_embs %>% filter(!is.na(sig_id))
return(test_embs)
}
vis_train_test_embs <- function(test_embs,train_embs,moa_n,perpl,init_dim,iter,emb_size,output_dir,name){
library(Rtsne)
addSmallLegend <- function(myPlot, pointSize = 0.5, textSize = 3, spaceLegend = 0.1) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
moa <- train_embs %>% group_by(moa_v1) %>% summarise(count = n()) %>% arrange(desc(count)) %>% mutate(cs = cumsum(count))
moa_vis <- moa$moa_v1[1:moa_n]
moa_vis <- unique(c(moa_vis,unique(as.character(test_embs$moa_v1))))
train_embs <- train_embs[which(as.character(train_embs$moa_v1) %in% moa_vis),]
train_embs$name <- ""
test_embs <- test_embs %>% mutate(name = paste0("test_",moa_v1))
tsne_all <- Rtsne(scale(rbind(train_embs[,2:(emb_size+1)],test_embs[,2:(emb_size+1)])),
dims = 2, perplexity=perpl,
verbose=TRUE, max_iter = iter,initial_dims = init_dim,check_duplicates = F)
df_all <- data.frame(V1 = tsne_all$Y[,1], V2 =tsne_all$Y[,2],
label = as.factor(c(train_embs$moa_v1,test_embs$moa_v1)),
name = c(train_embs$name,test_embs$name))
gtsne <- ggplot(df_all, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_discrete()+
geom_text(aes(label=name),hjust=0, vjust=0,size = 0.5)
png(file=paste0(output_dir,"/",name,".png"),width=9,height=9,units = "in",res=600)
print(addSmallLegend(gtsne))
dev.off()
}
predict_test_moa_emb <- function(test_embs,train_embs,emb_size,k){
library(tidyverse)
library(class)
train_embs <- train_embs %>% filter(!is.na(moa_v1))
set.seed(123)
model1<- knn(train=train_embs[,2:(emb_size+1)], test=test_embs[,2:(emb_size+1)], cl=as.factor(train_embs$moa_v1), k=k,use.all = T)
test_embs$predicted <- as.character(model1)
results <- test_embs
results <- test_embs %>% dplyr::select(test_rdkit,sig_id,moa_v1,predicted,cell_id,pert_iname) %>% unique()
return(results)
}
knn_dist_predictions <- function(train_embs,test_embs,train_labels,k,emb_length){
cosine_dist <- function(a,b){
a <- as.vector(as.matrix(a))
b <- as.vector(as.matrix(b))
cos_dist <- 1 - (a%*%b)/(sqrt(a%*%a)*sqrt(b%*%b))
return(cos_dist)
}
get_k_nearest <- function(a,k,col_names,train_embs){
a <- as.vector(as.matrix(a))
names(a) <- col_names
a <- sort(a,decreasing = F)
neighbors <- names(a)[1:k]
moas <- as.character(train_embs$moa_v1[which(train_embs$sig_id %in% neighbors)])
un_moas <- unique(moas)
freq <- NULL
for (j in 1:length(un_moas)) {
freq[j] <- length(which(moas %in% un_moas[j]))/length(moas)
}
names(freq) <- un_moas
assigned_moa <- names(freq)[which(freq==max(freq))]
return(assigned_moa)
}
d1 <- apply(test_embs[,2:(emb_length+1)], 1, function(x) apply(train_embs[,2:(emb_length+1)], 1, function(y) cosine_dist(x,y)))
d1 <- t(d1)
rownames(d1) <- as.character(test_embs$sig_id)
colnames(d1) <- as.character(train_embs$sig_id)
moas <- apply(d1,1,get_k_nearest,k,colnames(d1),train_embs)
results <- test_embs %>% dplyr::select(test_rdkit,sig_id,moa_v1,cell_id,pert_iname) %>% unique()
results$predicted <- moas
return(results)
}
evaluate_predictions <- function(predictions) {
overall_acc <- 0
for (i in 1:nrow(predictions)) {
if (any(predictions$predicted[i]==predictions$moa_v1[i])) {
overall_acc <- overall_acc+1
}
}
overall_acc <- overall_acc/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1[i]==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(list(overall_acc,test_drugs,length(which(test_drugs$belongs==1))/length(drugs),assigned_moa))
}
investigate_k <- function(k,test_embs,train_embs,emb_length,knn_type){
results <- matrix(666,nrow = length(k),ncol = 3)
for (i in 1:length(k)) {
if (knn_type == "normal") {
predictions <- predict_test_moa_emb(test_embs = test_embs,train_embs = train_embs,
emb_size = emb_length,
k = k[i])
}
if (knn_type == "modified") {
predictions <- knn_dist_predictions(train_embs = train_embs,test_embs = test_embs,
train_labels = train_embs$moa_v1,k = k[i],emb_length = emb_length)
}
eval <- evaluate_predictions(predictions = predictions)
results[i,1] <- k[i]
results[i,2] <- eval[[1]]
results[i,3] <- eval[[3]]
}
results <- as.data.frame(results)
colnames(results) <- c("k","sig_acc","drug_acc")
return(results)
}
write_results <- function(eval,output_dir,test_name){
sig_accuracy <- eval[[1]]
drug_accuracy <- eval[[3]]
df <- eval[[2]]
assigned <- eval[[4]]
df$assigned <- assigned
df$sig_accuracy <- sig_accuracy
df$drug_accuracy <- drug_accuracy
df <- df %>% unnest(assigned)
df <- df %>% group_by(moa_v1) %>% mutate(assigned = paste(assigned,collapse = "/")) %>% ungroup() %>% unique()
write.csv(df,paste0(output_dir,"/",test_name,"_eval_results.csv"))
}
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info_dups <- readRDS("data/graph_info_df/file_info_dups.rds")
labels <- readRDS("data/cmap/labels/labels_first_pass.rds")
emb <- read.csv("embeddings/graph2vec/g2v_emb_512_weighted_3.csv") # ALL
test_df <- readRDS("data/graph_additional/pairs/splits/split3/test_set.rds")
test_df <- readRDS("embeddings/ged_distance_semi/split3/test_set.rds")
val_df <- readRDS("embeddings/ged_distance_semi/split3/val_set_1.rds")
# preprocess embeddings, for each sig id keep one embedding (either averaged or random selection)
#emb <- emb[,-1]
colnames(emb)[1] <- "emb"
emb_proc <- prepape_embs(emb = emb,file_info = file_info,labels = labels,keep_one = F ,ave = T,n_emb = (ncol(emb)-1))
library(tidyverse)
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
file_info <- file_info %>% mutate(emb=patse0(sig_id,"_emb_graph"))
file_info <- file_info %>% mutate(emb=paste0(sig_id,"_emb_graph"))
file_info_dups <- file_info_dups %>% mutate(emb=paste0(sig_id,"_emb_graph"))
# remove duplicate sig id embeddings
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
# add sig id info to embs
emb <- left_join(emb,file_info,by=c("emb"="emb"))
# add label info to embs
labels <- labels %>% group_by(moa_v1) %>% mutate(count = n_distinct(rdkit_graph)) %>% ungroup()
labels <- labels %>% group_by(rdkit_graph) %>% filter(count == max(count)) %>% ungroup()
labels <- labels %>% group_by(rdkit_graph) %>% sample_n(1) %>% ungroup()
emb <- left_join(emb,labels,by = c("rdkit"="rdkit_graph"))
ave=TRUE
keep_one=FALSE
# keep one emb for each sig id
if (keep_one) {
emb <- emb %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
}
if (ave) {
aver <- aggregate(emb[, 2:(n_emb+1)], list(emb$sig_id), mean)
file_info_1 <- file_info %>% dplyr::select(sig_id,rdkit) %>% unique()
emb <- left_join(aver,file_info_1,by = c("Group.1"="sig_id"))
emb <- left_join(emb,labels,by = c("rdkit"="rdkit_graph"))
colnames(emb)[1] <- "sig_id"
}
View(emb)
emb <- unique(emb)
n_emb <- 512
aver <- aggregate(emb[, 2:(n_emb+1)], list(emb$sig_id), mean)
library(tidyverse)
library(doFuture)
# parallel set number of workers
registerDoFuture()
plan(multiprocess,workers = 6)
evaluate_embs_test_splits <- function(valsets,all_df,all_embs,length_emb,k){
library(class)
evaluate_predictions <- function(predictions) {
overall_acc <- 0
for (i in 1:nrow(predictions)) {
if (any(predictions$predicted[i]==predictions$moa_v1[i])) {
overall_acc <- overall_acc+1
}
}
overall_acc <- overall_acc/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1[i]==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(c(overall_acc,length(which(test_drugs$belongs==1))/length(drugs)))
}
all_sigs <- all_df %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
all_eval <- as.data.frame(matrix(0,nrow = length(valsets),ncol=2))
colnames(all_eval) <- c("sig_acc","drug_acc")
all_embs <- left_join(all_embs,all_sigs)
for (i in 1:length(valsets)) {
test_embs <- all_embs[which(all_embs$sig_id %in% valsets[[i]]$sig_id),]
train_embs <- anti_join(all_embs,test_embs,by = "sig_id")
set.seed(123)
model1<- knn(train=train_embs[,2:(length_emb+1)],
test=test_embs[,2:(length_emb+1)],
cl=as.factor(train_embs$moa_v1), k=k,use.all = T)
#test_sigs <- valsets[[i]]
test_embs$predicted <- as.character(model1)
test_embs <- test_embs %>% dplyr::select(sig_id,rdkit,moa_v1,predicted)
colnames(test_embs)[2] <- "test_rdkit"
eval <- evaluate_predictions(predictions = test_embs)
all_eval[i,1] <- eval[[1]]
all_eval[i,2] <- eval[[2]]
}
return(all_eval)
}
cv_knn_optimize <- function(valsets,all_df,all_embs,length_emb,k){
results <- NULL
results <- foreach(k_n = k) %dopar% {
evaluate_embs_test_splits(valsets = valsets,all_df=all_df,all_embs=all_embs,length_emb = length_emb,k=k_n)
}
k_invest <- as.data.frame(matrix(0,nrow = length(results),ncol = 2))
for (i in 1:length(results)) {
df <- results[[i]]
k_invest[i,1] <- mean(df$sig_acc)
k_invest[i,2] <- mean(df$drug_acc)
}
colnames(k_invest) <- c("mean_sig_acc","mean_drug_acc")
return(k_invest)
}
splits <- readRDS("embeddings/ged_distance_semi/split3/test_splits.rds")
#val1 <- readRDS('../deepSNEM_personal/val_set_1_withoriginals.rds')
#val1 <- val1 %>% mutate(sig_id=sig_id_original)
#val2 <- readRDS('../deepSNEM_personal/val_set_2_withoriginals.rds')
#val2 <- val2 %>% mutate(sig_id=sig_id_original)
#val3 <- readRDS('../deepSNEM_personal/val_set_3_withoriginals.rds')
#val3 <- val3 %>% mutate(sig_id=sig_id_original)
#val4 <- readRDS('../deepSNEM_personal/val_set_4_withoriginals.rds')
#val4 <- val4 %>% mutate(sig_id=sig_id_original)
#valsets <- list(val1,val2,val3,val4)
valsets <- list(splits[[1]],splits[[3]],splits[[4]],splits[[5]])
test_set <- list(splits[[2]])
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info_dups <- readRDS("data/graph_info_df/file_info_dups.rds")
labels <- readRDS("data/cmap/labels/labels_first_pass.rds")
allpairs <- readRDS("embeddings/ged_distance_semi/split3/allpairs3.rds")
allpairs <- NULL
gc
gc()
emb <- read.csv("embeddings/graph2vec/g2v_emb_512_weighted_3.csv") # ALL
# preprocess embeddings, for each sig id keep one embedding (either averaged or random selection)
#emb <- emb[,-1]
colnames(emb)[1] <- "emb"
n_emb <- 512
file_info <- file_info %>% mutate(emb=paste0(sig_id,"_emb_graph")) %>% unique()
file_info_dups <- file_info_dups %>% mutate(emb=paste0(sig_id,"_emb_graph")) %>% unique()
View(file_info)
file_info <- file_info %>% select(-files_combined) %>% unique()
file_info_dups <- file_info_dups %>% select(-files_combined) %>% unique()
library(tidyverse)
file_info <- file_info %>% dplyr::select(sig_id,rdkit,cell_id,count.x,emb)
# remove duplicate sig id embeddings
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
# add sig id info to embs
emb <- left_join(emb,file_info,by=c("emb"="emb"))
# add label info to embs
labels <- labels %>% group_by(moa_v1) %>% mutate(count = n_distinct(rdkit_graph)) %>% ungroup()
labels <- labels %>% group_by(rdkit_graph) %>% filter(count == max(count)) %>% ungroup()
labels <- labels %>% group_by(rdkit_graph) %>% sample_n(1) %>% ungroup()
emb <- left_join(emb,labels,by = c("rdkit"="rdkit_graph"))
aver <- aggregate(emb[, 2:(n_emb+1)], list(emb$sig_id), mean)
View(aver)
View(emb)
file_info_1 <- file_info %>% dplyr::select(sig_id,rdkit) %>% unique()
emb <- left_join(aver,file_info_1,by = c("Group.1"="sig_id"))
emb <- left_join(emb,labels,by = c("rdkit"="rdkit_graph"))
colnames(emb)[1] <- "sig_id"
emb_proc <- emb
length(unique(emb_proc$sig_id))
emb_proc <- emb_proc %>% filter(!is.na(moa_v1)) %>% filter(moa_v1 != "")
emb_proc <- emb_proc %>% group_by(moa_v1) %>% mutate(count_moa = n_distinct(sig_id)) %>% ungroup()
emb_proc <- emb_proc %>% filter(count_moa >= 3)
emb_proc_df <- emb_proc %>% select(sig_id_original,rdkit,rdkit_broad,moa,target,disease_area,indication,moa_v1,count)
emb_proc_df <- emb_proc %>% select(sig_id,rdkit,rdkit_broad,moa,target,disease_area,indication,moa_v1,count)
ttt <- emb_proc
View(emb_proc)
emb_proc <- emb_proc[,1:513]
#test_set <- readRDS('../deepSNEM_personal/test_set_withoriginals.rds')
#test_set <- test_set %>% mutate(sig_id=sig_id_original)
all_df <- emb_proc_df
all_embs <- emb_proc
k <- seq(1,200,1)
all_df <- all_df[-which(all_df$sig_id %in% test_set$sig_id),]
all_embs <- all_embs[-which(all_embs$sig_id %in% test_set$sig_id),]
splits <- readRDS("embeddings/ged_distance_semi/split3/test_splits.rds")
#val1 <- readRDS('../deepSNEM_personal/val_set_1_withoriginals.rds')
#val1 <- val1 %>% mutate(sig_id=sig_id_original)
#val2 <- readRDS('../deepSNEM_personal/val_set_2_withoriginals.rds')
#val2 <- val2 %>% mutate(sig_id=sig_id_original)
#val3 <- readRDS('../deepSNEM_personal/val_set_3_withoriginals.rds')
#val3 <- val3 %>% mutate(sig_id=sig_id_original)
#val4 <- readRDS('../deepSNEM_personal/val_set_4_withoriginals.rds')
#val4 <- val4 %>% mutate(sig_id=sig_id_original)
#valsets <- list(val1,val2,val3,val4)
valsets <- list(splits[[1]],splits[[3]],splits[[4]],splits[[5]])
test_set <- list(splits[[2]])
#test_set <- readRDS('../deepSNEM_personal/test_set_withoriginals.rds')
#test_set <- test_set %>% mutate(sig_id=sig_id_original)
all_df <- emb_proc_df
all_embs <- emb_proc
k <- seq(1,200,1)
View(test_set)
sss <- test_set$sig_id
View(valsets)
View(splits)
#val1 <- readRDS('../deepSNEM_personal/val_set_1_withoriginals.rds')
#val1 <- val1 %>% mutate(sig_id=sig_id_original)
#val2 <- readRDS('../deepSNEM_personal/val_set_2_withoriginals.rds')
#val2 <- val2 %>% mutate(sig_id=sig_id_original)
#val3 <- readRDS('../deepSNEM_personal/val_set_3_withoriginals.rds')
#val3 <- val3 %>% mutate(sig_id=sig_id_original)
#val4 <- readRDS('../deepSNEM_personal/val_set_4_withoriginals.rds')
#val4 <- val4 %>% mutate(sig_id=sig_id_original)
#valsets <- list(val1,val2,val3,val4)
valsets <- list(splits[[1]],splits[[3]],splits[[4]],splits[[5]])
View(valsets)
test_set <- splits[[2]]
View(test_set)
#test_set <- readRDS('../deepSNEM_personal/test_set_withoriginals.rds')
#test_set <- test_set %>% mutate(sig_id=sig_id_original)
all_df <- emb_proc_df
all_embs <- emb_proc
k <- seq(1,200,1)
all_df <- all_df[-which(all_df$sig_id %in% test_set$sig_id),]
all_embs <- all_embs[-which(all_embs$sig_id %in% test_set$sig_id),]
results <- cv_knn_optimize(valsets,all_df,all_embs,512,k)
View(results)
k <- k[28]
baseline_val <- evaluate_embs_test_splits(valsets,all_df,all_embs,
length_emb = 512,k = k)
View(baseline_val)
all_df <- emb_proc_df
all_embs <- emb_proc
baseline_test <- evaluate_embs_test_splits(list(test_set),all_df,all_embs,
length_emb = 512, k =k)
View(baseline_test)
write.csv(emb_proc_df,"../deepSNEM_personal/emb_proc_df_g2v_512_weighted.csv",row.names = F)
write.csv(emb_proc,"../deepSNEM_personal/emb_proc_g2v_512_weighted.csv",row.names = F)
