View(test_sigs)
evaluate_predictions <- function(predictions) {
overall_acc <- length(which(predictions$predicted==predictions$moa_v1))/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(list(overall_acc,test_drugs))
}
View(test_sigs)
colnames(test_sigs)[2] <- "test_rdkit"
a <- evaluate_predictions(predictions = test_sigs)
a[[2]]$belongs
model1<- knn(train=genes_train, test=genes_test, cl=as.factor(train_sigs$moa_v1), k=5,use.all = T)
test_sigs$predicted <- as.character(model1)
colnames(test_sigs)[2] <- "test_rdkit"
a <- evaluate_predictions(predictions = test_sigs)
model1<- knn(train=genes_train, test=genes_test, cl=as.factor(train_sigs$moa_v1), k=10,use.all = T)
test_sigs$predicted <- as.character(model1)
colnames(test_sigs)[2] <- "test_rdkit"
a <- evaluate_predictions(predictions = test_sigs)
random_test <- candidates %>% group_by(moa_v1) %>% sample_n(1) %>% ungroup()
random_test <- left_join(random_test,graphs,by=c("rdkit"="rdkit"))
all_sigs <- sigs %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
random_test_sigs <- random_test %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
train_sigs <- anti_join(all_sigs,random_test_sigs)
test_sigs <- random_test_sigs
train_sigs <- left_join(train_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
test_sigs <- left_join(test_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
genes_train <- get_cmap_signatures(ds_path,sig_ids = as.character(train_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_train <- t(genes_train)
genes_test <- get_cmap_signatures(ds_path,sig_ids = as.character(test_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_test <- t(genes_test)
model1<- knn(train=genes_train, test=genes_test, cl=as.factor(train_sigs$moa_v1), k=3,use.all = T)
test_sigs$predicted <- as.character(model1)
colnames(test_sigs)[2] <- "test_rdkit"
a <- evaluate_predictions(predictions = test_sigs)
library(tidyverse)
df1 <- readRDS("data/graph_additional/df1.rds")
df2 <- readRDS("data/graph_additional/df2.rds")
df_pairs <- bind_rows(df1,df2)
View(df_pairs)
length(which(df_pairs$identifier.x==df_pairs$identifier.y))
df_pairs <- df_pairs %>% select(-moa.x,-moa.y,-same_label)
View(df_pairs)
# read file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
graphs_rdkit <- file_info %>% select(files_combined,rdkit)
graphs_rdkit <- file_info %>% select(files_combined,rdkit) %>% unique()
df_pairs <- left_join(df_pairs,graphs_rdkit,by = c("graph.x"="files_combined"))
df_pairs <- left_join(df_pairs,graphs_rdkit,by = c("graph.y"="files_combined"))
labels <- readRDS("data/cmap/labels/labels_first_pass.rds")
rdkit_labels <- labels %>% select(rdkit_graph,moa_v1)
df_pairs <- left_join(df_pairs,rdkit_labels,by = c("rdkit.x"="rdkit_graph"))
df_pairs <- left_join(df_pairs,rdkit_labels,by = c("rdkit.y"="rdkit_graph"))
saveRDS(df_pairs,"data/graph_additional/pairs/allpairs.rds")
library(tidyverse)
allpairs <- readRDS("data/graph_additional/pairs/allpairs.rds")
allpairs$label <- 0
allpairs$label <- 0
allpairs$label[allpairs$moa_v1.x==allpairs$moa_v1.y] <- 1
length(which(allpairs$label==1))
allpairs$label[allpairs$identifier.x==allpairs$identifier.y] <- 1
length(which(allpairs$label==1))
saveRDS(allpairs,"data/graph_additional/pairs/allpairs.rds")
# read file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
graphs <- unique(c(as.character(df_pairs$graph.x),as.character(df_pairs$graph.y)))
graphs <- unique(c(as.character(allpairs$graph.x),as.character(allpairs$graph.y)))
graphs <- as.data.frame(graphs)
graphs <- left_join(graphs,file_info,by = c("graphs"="files_combined"))
graphs <- graphs %>% filter(!is.na(sig_id)) %>% filter(!is.na(rdkit))
sigs <- graphs %>% dplyr::select(sig_id,pert_iname,cell_id,rdkit) %>% unique()
labels <- readRDS("data/cmap/labels/labels_first_pass.rds")
sigs <- left_join(sigs,labels,by=c("rdkit"="rdkit_graph"))
# remove the sigs with no label
sigs <- sigs %>% filter(!is.na(moa_v1))
# remove from the splitting process the drugs with multiple moas
sigs <- sigs %>% group_by(rdkit) %>% mutate(duplicate_moa = n_distinct(moa_v1)) %>% ungroup()
sigs <- sigs %>% filter(duplicate_moa==1)
sigs <- sigs %>% group_by(rdkit) %>% mutate(rdkit_count = n_distinct(sig_id)) %>% ungroup()
sigs <- sigs %>% group_by(moa_v1) %>% mutate(moa_count = n_distinct(rdkit)) %>% ungroup()
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- candidates %>% filter(moa_count>=10)
View(graphs)
saveRDS(graphs,"data/graph_additional/pairs/graphs_no_dupl.rds")
graphs <- readRDS("data/graph_additional/pairs/graphs_no_dupl.rds")
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- candidates %>% filter(moa_count>=min_moa)
min_moa <- 10
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- candidates %>% filter(moa_count>=min_moa)
View(candidates)
random_test <- candidates %>% group_by(moa_v1) %>% sample_n(1) %>% ungroup()
View(random_test)
get_test_drugs <- function(n_split,sigs,min_moa){
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- candidates %>% filter(moa_count>=min_moa)
test_list <- list(0)
for (i in 1:split) {
random_test <- candidates %>% group_by(moa_v1) %>% sample_n(1) %>% ungroup()
candidates <- candidates[-which(candidates$rdkit%in%random_test$rdkit),]
random_test <- left_join(random_test,sigs,by=c("rdkit"="rdkit"))
test_list[[i]] <- random_test
}
return(test_list)
}
test_splits <- get_test_drugs(6,sigs,10)
min_moa <- 10
n_split <- 6
get_test_drugs <- function(n_split,sigs,min_moa){
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- candidates %>% filter(moa_count>=min_moa)
test_list <- list(0)
for (i in 1:n_split) {
random_test <- candidates %>% group_by(moa_v1) %>% sample_n(1) %>% ungroup()
candidates <- candidates[-which(candidates$rdkit%in%random_test$rdkit),]
random_test <- left_join(random_test,sigs,by=c("rdkit"="rdkit"))
test_list[[i]] <- random_test
}
return(test_list)
}
test_splits <- get_test_drugs(6,sigs,10)
View(test_splits)
View(candidates)
View(sigs)
View(random_test)
View(sigs)
View(sigs)
min_moa <- 10
n_split <- 6
get_test_drugs <- function(n_split,sigs,min_moa){
candidates <- sigs %>% dplyr::select(rdkit,rdkit_count,moa_v1,moa_count) %>% unique()
candidates <- candidates %>% filter(moa_count>=min_moa)
test_list <- list(0)
sigs <- sigs %>% dplyr::select(sig_id,cell_id,pert_iname,rdkit)
for (i in 1:n_split) {
random_test <- candidates %>% group_by(moa_v1) %>% sample_n(1) %>% ungroup()
candidates <- candidates[-which(candidates$rdkit%in%random_test$rdkit),]
random_test <- left_join(random_test,sigs,by=c("rdkit"="rdkit"))
test_list[[i]] <- random_test
}
return(test_list)
}
test_splits <- get_test_drugs(6,sigs,10)
View(test_splits)
View(test_splits)
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
evaluate_predictions <- function(predictions) {
overall_acc <- length(which(predictions$predicted==predictions$moa_v1))/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(list(overall_acc,test_drugs))
}
View(sigs)
evaluate_gene_perf_test_splits <- function(test_splits,sigs,ds_path,landmark,sig_mapping,k){
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
evaluate_predictions <- function(predictions) {
overall_acc <- length(which(predictions$predicted==predictions$moa_v1))/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(c(overall_acc,length(which(test_drugs$belongs==1))/nrow(test_drugs)))
}
all_sigs <- sigs %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
all_eval <- list(0)
for (i in 1:length(test_splits)) {
test_sigs <- test_splits[[i]] %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
train_sigs <- anti_join(all_sigs,random_test_sigs)
train_sigs <- left_join(train_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
test_sigs <- left_join(test_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
genes_train <- get_cmap_signatures(ds_path,sig_ids = as.character(train_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_train <- t(genes_train)
genes_test <- get_cmap_signatures(ds_path,sig_ids = as.character(test_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_test <- t(genes_test)
model1<- knn(train=genes_train, test=genes_test, cl=as.factor(train_sigs$moa_v1), k=k,use.all = T)
test_sigs$predicted <- as.character(model1)
colnames(test_sigs)[2] <- "test_rdkit"
eval <- evaluate_predictions(predictions = test_sigs)
all_eval[[i]] <- eval
}
return(all_eval)
}
sig_mapping <- readRDS("data/graph_info_df/sig_mapping.rds")
ds_path <- "C:/Users/user/Documents/phd/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
landmark <- read_tsv(file = "data/cmap/util_files/cmap_landmark_genes.txt")
baseline <- evaluate_gene_perf_test_splits(test_splits = test_splits,sigs = sigs,
ds_path = ds_path,landmark = landmark,sig_mapping = sig_mapping,k = 3)
evaluate_gene_perf_test_splits <- function(test_splits,sigs,ds_path,landmark,sig_mapping,k){
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
evaluate_predictions <- function(predictions) {
overall_acc <- length(which(predictions$predicted==predictions$moa_v1))/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(c(overall_acc,length(which(test_drugs$belongs==1))/nrow(test_drugs)))
}
all_sigs <- sigs %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
all_eval <- list(0)
for (i in 1:length(test_splits)) {
test_sigs <- test_splits[[i]] %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
train_sigs <- anti_join(all_sigs,test_sigs)
train_sigs <- left_join(train_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
test_sigs <- left_join(test_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
genes_train <- get_cmap_signatures(ds_path,sig_ids = as.character(train_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_train <- t(genes_train)
genes_test <- get_cmap_signatures(ds_path,sig_ids = as.character(test_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_test <- t(genes_test)
model1<- knn(train=genes_train, test=genes_test, cl=as.factor(train_sigs$moa_v1), k=k,use.all = T)
test_sigs$predicted <- as.character(model1)
colnames(test_sigs)[2] <- "test_rdkit"
eval <- evaluate_predictions(predictions = test_sigs)
all_eval[[i]] <- eval
}
return(all_eval)
}
baseline <- evaluate_gene_perf_test_splits(test_splits = test_splits,sigs = sigs,
ds_path = ds_path,landmark = landmark,sig_mapping = sig_mapping,k = 3)
evaluate_gene_perf_test_splits <- function(test_splits,sigs,ds_path,landmark,sig_mapping,k){
library(class)
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
evaluate_predictions <- function(predictions) {
overall_acc <- length(which(predictions$predicted==predictions$moa_v1))/nrow(predictions)
drugs <- unique(as.character(predictions$test_rdkit))
assigned_moa <- list(0)
for (i in 1:length(drugs)) {
filt <- predictions[which(predictions$test_rdkit %in% drugs[i]),]
moas <- as.character(unique(filt$predicted))
freq <- NULL
for (j in 1:length(moas)) {
freq[j] <- length(which(filt$predicted %in% moas[j]))/nrow(filt)
}
names(freq) <- moas
assigned_moa_n <- names(freq)[which(freq==max(freq))]
assigned_moa[[i]] <- assigned_moa_n
}
test_drugs <- as.data.frame(drugs)
test_drugs <- left_join(test_drugs,predictions,by = c("drugs"="test_rdkit")) %>% dplyr::select(drugs,moa_v1) %>% unique()
test_drugs$belongs <- 0
for (i in 1:nrow(test_drugs)) {
if (any(test_drugs$moa_v1==assigned_moa[[i]])) {
test_drugs$belongs[i] <- 1
}
}
return(c(overall_acc,length(which(test_drugs$belongs==1))/nrow(test_drugs)))
}
all_sigs <- sigs %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
all_eval <- list(0)
for (i in 1:length(test_splits)) {
test_sigs <- test_splits[[i]] %>% dplyr::select(sig_id,rdkit,moa_v1) %>% unique()
train_sigs <- anti_join(all_sigs,test_sigs)
train_sigs <- left_join(train_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
test_sigs <- left_join(test_sigs,sig_mapping,by = c("sig_id"="sig_id2"))
genes_train <- get_cmap_signatures(ds_path,sig_ids = as.character(train_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_train <- t(genes_train)
genes_test <- get_cmap_signatures(ds_path,sig_ids = as.character(test_sigs$sig_id.y),landmark = T,landmark_df = landmark)
genes_test <- t(genes_test)
model1<- knn(train=genes_train, test=genes_test, cl=as.factor(train_sigs$moa_v1), k=k,use.all = T)
test_sigs$predicted <- as.character(model1)
colnames(test_sigs)[2] <- "test_rdkit"
eval <- evaluate_predictions(predictions = test_sigs)
all_eval[[i]] <- eval
}
return(all_eval)
}
landmark <- read_tsv(file = "data/cmap/util_files/cmap_landmark_genes.txt")
baseline <- evaluate_gene_perf_test_splits(test_splits = test_splits,sigs = sigs,
ds_path = ds_path,landmark = landmark,sig_mapping = sig_mapping,k = 3)
View(baseline)
length(which(test_splits[[1]]$rdkit%in%test_splits[[2]]$rdkit))
length(which(test_splits[[1]]$rdkit%in%test_splits[[3]]$rdkit))
length(which(test_splits[[1]]$rdkit%in%test_splits[[4]]$rdkit))
length(which(test_splits[[1]]$rdkit%in%test_splits[[1]]$rdkit))
length(which(test_splits[[1]]$rdkit%in%test_splits[[5]]$rdkit))
length(which(test_splits[[1]]$rdkit%in%test_splits[[6]]$rdkit))
length(which(test_splits[[2]]$rdkit%in%test_splits[[6]]$rdkit))
length(which(test_splits[[3]]$rdkit%in%test_splits[[6]]$rdkit))
test_sigs <- test_splits[[6]]
test_df <- readRDS("data/graph_additional/test_set_1.rds")
View(test_sigs)
test_embs <- left_join(test_sigs,graphs,by=c("sig_id"="sig_id"))
View(test_embs)
View(test_df)
View(test_embs)
test_embs <- test_embs %>% dplyr::select(rdkit.x,sig_id,graphs,pert_iname.x,cell_id.x,emb,moa_v1)
saveRDS(test_embs,"data/graph_additional/pairs/splits/test_set.rds")
write.csv(test_embs,"data/graph_additional/pairs/splits/test_set.csv")
for (i in 1:(length(test_splits)-1)) {
test_sigs <- test_splits[[i]]
test_embs <- left_join(test_sigs,graphs,by=c("sig_id"="sig_id"))
test_embs <- test_embs %>% dplyr::select(rdkit.x,sig_id,graphs,pert_iname.x,cell_id.x,emb,moa_v1)
saveRDS(test_embs,paste0("data/graph_additional/pairs/splits/val_set_",i,".rds"))
write.csv(test_embs,paste0("data/graph_additional/pairs/splits/val_set_",i,".csv"))
}
test_sigs <- test_splits[[6]]
test_sigs <- test_splits[[6]]
test_id <- unique(c(which(allpairs$rdkit.x %in% test_sigs$rdkit),which(allpairs$rdkit.y %in% test_sigs$rdkit)))
test_embs <- left_join(test_sigs,graphs,by=c("sig_id"="sig_id"))
length(which(allpairs$label==1))
#set labels of test all to 0
allpairs$label[test_id] <- 0
length(which(allpairs$label==1))
658*658
allpairs$label1 <- allpairs$label
allpairs$label2 <- allpairs$label
allpairs$label3 <- allpairs$label
allpairs$label4 <- allpairs$label
allpairs$label5 <- allpairs$label
val_1 <- test_splits[[1]]
val_1 <- test_splits[[1]]
val_2 <- test_splits[[2]]
val_3 <- test_splits[[3]]
val_4 <- test_splits[[4]]
val_5 <- test_splits[[5]]
test_drugs <- unique(as.character(test_sigs$rdkit))
test_id2 <- unique(c(which(as.character(allpairs$rdkit.x) %in% test_drugs),which(as.character(allpairs$rdkit.y) %in% test_drugs)))
all(test_id==test_id2)
val_id_1 <- unique(c(which(allpairs$rdkit.x %in% val_1$rdkit),which(allpairs$rdkit.y %in% val_1$rdkit)))
val_id_2 <- unique(c(which(allpairs$rdkit.x %in% val_2$rdkit),which(allpairs$rdkit.y %in% val_2$rdkit)))
val_id_3 <- unique(c(which(allpairs$rdkit.x %in% val_3$rdkit),which(allpairs$rdkit.y %in% val_3$rdkit)))
val_id_4 <- unique(c(which(allpairs$rdkit.x %in% val_4$rdkit),which(allpairs$rdkit.y %in% val_4$rdkit)))
val_id_5 <- unique(c(which(allpairs$rdkit.x %in% val_5$rdkit),which(allpairs$rdkit.y %in% val_5$rdkit)))
allpairs$label1[val_id_1] <- 0
allpairs$label2[val_id_2] <- 0
allpairs$label3[val_id_3] <- 0
allpairs$label4[val_id_4] <- 0
allpairs$label5[val_id_5] <- 0
View(allpairs)
saveRDS(allpairs,"data/graph_additional/pairs/allpairs.rds")
write.csv(allpairs,"data/graph_additional/pairs/allpairs.csv")
saveRDS(test_splits,"data/graph_additional/pairs/test_splits.rds")
