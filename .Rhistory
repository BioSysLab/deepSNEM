labels <- as.data.frame(labels)
labels$label <- 1
labels$label[which(labels$labels %in% identifier[i])] <- 999
labels$label <- as.factor(labels$label)
df2 <- data.frame(V1 = tsne2$Y[,1], V2 =tsne2$Y[,2], label = labels$label)
g2 <- ggplot(df2, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
g[[i]] <- g2
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_tnse.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = g,nrow = 5)
dev.off()
# UMAP task 2
umap2 <- umap(emb_task2_tsne[,-c(1,ncol(emb_task2_tsne))])
gmap <- NULL
for (i in 1:25) {
labels <- emb_task2_tsne$identifier
labels <- as.data.frame(labels)
labels$label <- 1
labels$label[which(labels$labels %in% identifier[i])] <- 999
labels$label <- as.factor(labels$label)
df2 <- data.frame(V1 = umap2$layout[,1], V2 =umap2$layout[,2], label = labels$label)
g2map <- ggplot(df2, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T)
gmap[[i]] <- g2map
}
png(file=paste0(output_dir,"/task2/","task_duplicate_sig_id_umap.png"),width=12,height=9,units = "in",res=300)
gridExtra::grid.arrange(grobs = gmap,nrow = 5)
dev.off()
#task 2 utility of embeddings compare with gene distance
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
distance_scores <- function(num_table, threshold_count, names) {
library(GeneExpressionSignature)
library(tidyverse)
### rank the table
table_ranked <- apply(X = -num_table, MARGIN = 2, FUN = rank, ties.method = "random")
### create the phenodata
pheno2 <- as.data.frame(colnames(num_table))
rownames(pheno2) <- colnames(num_table)
pheno_new <- new("AnnotatedDataFrame",data=pheno2)
### create expression set
expr_set <- new("ExpressionSet",exprs = table_ranked, phenoData=pheno_new)
### calculate distances
distances <- ScoreGSEA(expr_set , threshold_count,"avg")
colnames(distances) <- names
rownames(distances) <- names
return(distances)
}
### duplicate gene distances
thresh <- c(10,15,20,25,30)
identifier <- unique(as.character(file_info_dups$identifier))
dup_gene_distances <- readRDS("data/gene_distances_val/dup_gene_distances_for_eval.rds")
# calculate random gene distances
sigs_random <- as.data.frame(sigs_random)
sigs_random <- left_join(sigs_random,sig_mapping,by = c("sigs_random"="sig_id2"))
dist_genes_random <- list(0)
genes_random <- get_cmap_signatures(sig_ids = sigs_random$sig_id,cmap_path_to_gctx = ds_path,landmark_df = landmark,landmark = TRUE)
for (j in 1:length(thresh)) {
dist2 <- distance_scores(num_table = genes_random,threshold_count = thresh[j],names = colnames(genes_random))
dist_genes_random[[j]] <- dist2
}
sam <- 0
for (k in 1:length(dist_genes_random)) {
sam <- sam + dist_genes_random[[k]]
}
sam <- sam/length(dist_genes_random)
sam[lower.tri(sam,diag = T)] <- 666
rownames(sam) <- as.character(sigs_random$sigs_random)
colnames(sam) <- as.character(sigs_random$sigs_random)
sam <- reshape2::melt(sam)
sam <- sam %>% filter(value != 666)
sam$value <- sam$value/2
# write results task 2 genes
c <- max(c(density(sam$value)$y,density(dup_gene_distances$value)$y))
png(file=paste0(output_dir,"/task2/","task2_duplicate_vs_random_sig_id_genes.png"),width=7,height=6,units = "in",res=300)
multi2(list(dup_gene_distances$value,sam$value),xlab = "Distance", xaxs="i",yaxs="i",ylim = c(0,c+0.01))
title("C", adj = 0)
legend("topright",
legend = c("genes from duplicate perts", "random genes"),
col = c('black',
'red'),
lty = c(1,1),
bty = "o",
pt.cex = 1.5,
cex = 0.8,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
dev.off()
output_task2genes <- data.frame(matrix(0,nrow = 1, ncol = 6))
colnames(output_task2genes) <- c("mean_same","sd_same","n_same","mean_random","sd_random","n_random")
output_task2genes$mean_same <- mean(dup_gene_distances$value,na.rm=T)
output_task2genes$sd_same <- sd(dup_gene_distances$value,na.rm=T)
output_task2genes$n_same <- nrow(dup_gene_distances)
output_task2genes$mean_random <- mean(sam$value,na.rm=T)
output_task2genes$sd_random <- sd(sam$value,na.rm=T)
output_task2genes$n_random <- nrow(sam)
write.csv(output_task2genes,paste0(output_dir,"/task2/","task2_stats_genes.csv"))
print("TASK 2 FINISHED")
# Task 3 similar chemical structure similar embeddings and comparison with gene dist
file_info <- left_join(file_info,sig_mapping,by = c("sig_id"="sig_id2"))
cell_info <- file_info %>% group_by(cell_id) %>% summarise(count = n_distinct(sig_id))
cell_info <- cell_info[order(cell_info$count,decreasing = T),]
if (distance_type == "cosine") {
# cosine is normalized to 0-1 universally
distance_function2 <- function(df){
cos <- cosine(t(df[,-1]),y = NULL)
cos <- (cos + 1)/(2)
cos_dist <- 1-cos
#cos_dist[lower.tri(cos_dist,diag = T)] <- 666
rownames(cos_dist) <- as.character(df$emb)
colnames(cos_dist) <- as.character(df$emb)
cos_dist <- reshape2::melt(cos_dist)
#cos_dist <- cos_dist %>% filter(value != 666)
return(cos_dist)
}
}
if (distance_type == "euclidian") {
#this is unnormalized
distance_function2 <- function(df){
eu_dist <- dist(df[,-1])
eu_dist <- as.matrix(eu_dist)
#eu_dist[lower.tri(eu_dist,diag = T)] <- 666
rownames(eu_dist) <- as.character(df$emb)
colnames(eu_dist) <- as.character(df$emb)
eu_dist <- reshape2::melt(eu_dist)
#eu_dist <- eu_dist %>% filter(value != 666)
return(eu_dist)
}
}
dir.create(paste0(output_dir,"/task3"),recursive = T)
file_info$cell_id <- as.character(file_info$cell_id)
cell_info$cell_id <-  as.character(cell_info$cell_id)
for (i in 1:4) {
file_info_t3 <- file_info %>% filter(cell_id==cell_info$cell_id[i]) %>% filter (!is.na(rdkit))
rdkit_sig_id_map <- file_info_t3 %>% dplyr::select(rdkit,sig_id,sig_id.y) %>% filter (!is.na(rdkit)) %>% unique()
rdkit_test <- file_info_t3 %>% dplyr::select(rdkit) %>% filter(!is.na(rdkit)) %>% unique()
ids_rdkit <- which(rownames(sims) %in% rdkit_test$rdkit)
sims_filt <- sims[ids_rdkit,ids_rdkit]
sims_filt <- as.matrix(sims_filt)
rownames(sims_filt) <- colnames(sims_filt)
sims_filt <- reshape2::melt(sims_filt)
sims_filt <- left_join(sims_filt,rdkit_sig_id_map,by = c("Var1"="rdkit"))
sims_filt <- left_join(sims_filt,rdkit_sig_id_map,by = c("Var2"="rdkit"))
colnames(sims_filt) <- c("rdkit_x","rdkit_y","value_ecfp","sig_id_x1","sig_id_x2","sig_id_y1","sig_id_y2")
sims_filt$value_ecfp <- 1-sims_filt$value_ecfp
sam <- readRDS(paste0("data/gene_distances_val/",as.character(cell_info$cell_id[i]),"_genes.rds"))
dist_t3 <- left_join(sims_filt,sam,by = c("sig_id_x2"="Var1","sig_id_y2"="Var2"))
# now need to add 5 different embedding distances
for (j in 1:5) {
file_info_t3_embs <- file_info_t3 %>% group_by(sig_id) %>% mutate(sampled_emb = sample(emb,1)) %>% ungroup() %>%
dplyr::select(sig_id,sig_id.y,sampled_emb) %>% unique()
embs <- test[which(test$emb %in% file_info_t3_embs$sampled_emb),]
dist_embs <- distance_function2(df = embs)
dist_embs <- left_join(dist_embs,file_info_t3_embs,by = c("Var1"="sampled_emb"))
dist_embs <- left_join(dist_embs,file_info_t3_embs,by = c("Var2"="sampled_emb"))
colnames(dist_embs) <- c(paste0("emb_x",j),paste0("emb_y",j),paste0("emb_dist",j),"sig_id_x1","sig_id_x2","sig_id_y1","sig_id_y2")
dist_t3 <- left_join(dist_t3,dist_embs,by = c("sig_id_x1"="sig_id_x1","sig_id_y1"="sig_id_y1"))
}
print(paste0("TASK 3 FINISHED BY ",25*i,"%"))
dist_t3 <- dist_t3 %>% dplyr::select(rdkit_x,rdkit_y,sig_id_x1,sig_id_y1,value_ecfp,value,emb_x1,emb_y1,emb_dist1,emb_x2,emb_y2,emb_dist2,
emb_x3,emb_y3,emb_dist3,emb_x4,emb_y4,emb_dist4,emb_x5,emb_y5,emb_dist5)
dist_t3 <- dist_t3 %>% filter(rdkit_x != rdkit_y)
saveRDS(dist_t3,paste0(output_dir,"/task3/","task3_df_",as.character(cell_info$cell_id[i]),"_all_dists.RDS"))
gene_thresh <- c(0.2,0.4,0.6,0.8,1) * (output_task2genes$mean_same+output_task2genes$sd_same)
emb_thresh <- c(0.2,0.4,0.6,0.8,1) * (output_task2$mean_same+output_task2$sd_same)
str_thresh <- c(0.1,0.2,0.3)
gene_prec <- matrix(0,nrow = 4,ncol = 6)
emb_prec <- matrix(0,nrow = 4, ncol = 6)
for (k in 1:length(str_thresh)) {
for (l in 1:length(emb_thresh)) {
n <- length(which(dist_t3$value_ecfp<=str_thresh[k]))
gene_prec[k,l] <- length(which(dist_t3$value_ecfp<=str_thresh[k] & dist_t3$value<=gene_thresh[l]))/n
emb_prec_1 <- length(which(dist_t3$value_ecfp<=str_thresh[k] & dist_t3$emb_dist1<=emb_thresh[l]))/n
emb_prec_2 <- length(which(dist_t3$value_ecfp<=str_thresh[k] & dist_t3$emb_dist2<=emb_thresh[l]))/n
emb_prec_3 <- length(which(dist_t3$value_ecfp<=str_thresh[k] & dist_t3$emb_dist3<=emb_thresh[l]))/n
emb_prec_4 <- length(which(dist_t3$value_ecfp<=str_thresh[k] & dist_t3$emb_dist4<=emb_thresh[l]))/n
emb_prec_5 <- length(which(dist_t3$value_ecfp<=str_thresh[k] & dist_t3$emb_dist5<=emb_thresh[l]))/n
emb_prec[k,l] <- max(emb_prec_1,emb_prec_2,emb_prec_3,emb_prec_4,emb_prec_5)
gene_prec[4,l] <- length(which(dist_t3$value<=gene_thresh[l]))
n_dist1 <- length(which(dist_t3$emb_dist1<=emb_thresh[l]))
n_dist2 <- length(which(dist_t3$emb_dist2<=emb_thresh[l]))
n_dist3 <- length(which(dist_t3$emb_dist3<=emb_thresh[l]))
n_dist4 <- length(which(dist_t3$emb_dist4<=emb_thresh[l]))
n_dist5 <- length(which(dist_t3$emb_dist5<=emb_thresh[l]))
emb_prec[4,l] <- max(n_dist1,n_dist2,n_dist3,n_dist4,n_dist5)
}
gene_prec[k,6] <- n
emb_prec[k,6] <- n
}
colnames(gene_prec) <- c("20%","40%","60%","80%","100%","no_similar_drugs")
rownames(gene_prec) <- c("str_thresh_01","str_thresh_02","str_thresh_03","number_lower_than_thresh")
colnames(emb_prec) <- c("20%","40%","60%","80%","100%","no_similar_drugs")
rownames(emb_prec) <- c("str_thresh_01","str_thresh_02","str_thresh_03","number_lower_than_thresh")
write.csv(gene_prec,paste0(output_dir,"/task3/","gene_precision_",as.character(cell_info$cell_id[i]),".csv"),row.names = T)
write.csv(emb_prec,paste0(output_dir,"/task3/","emb_precision_",as.character(cell_info$cell_id[i]),".csv"),row.names = T)
}
}
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info_dups <- readRDS("data/graph_info_df/file_info_dups.rds")
###
distance_type = "cosine"
###
output_dir <- "validation/validation_unet/unet_128"
ds_path <- "C:/Users/user/Documents/phd/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
library(tidyverse)
landmark <- read_tsv(file = "data/cmap/util_files/cmap_landmark_genes.txt")
sig_mapping <- readRDS("data/graph_info_df/sig_mapping.rds")
test <- read.csv("embeddings/unet/embeddings_unet_128.csv")
embs <- read.csv("embeddings/graph2vec/emb_clustered_norm_500.csv")
test[,1] <- as.character(embs[,1])
colnames(test)[1] <- "emb"
sims <- readRDS("data/rdkit/rdkit_sims.rds")
eval_emb(test = test, file_info = file_info ,
distance_type = distance_type,output_dir = output_dir, file_info_dups = file_info_dups,
ds_path = ds_path,landmark = landmark, sig_mapping = sig_mapping, sims = sims)
library(tidyverse)
labels <- readRDS("data/cmap/labels.rds")
moa <- labels %>% group_by(moa) %>% summarise(count = n()) %>% arrange(desc(count))
View(moa)
group_check <- function(group,group_name,original_big_group,
labels,emb_test,file_info,emb_size,output_dir,
label_space_only, tsne_perpl, umap_n,
cell_specific,cell_line,genes, ds_path,
landmark,sig_map,tsne_perpl_genes, init_dim, init_dim_genes){
library(tidyverse)
library(clustree)
library(Rtsne)
library(ggplot2)
library(umap)
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
dir.create(output_dir,recursive = T)
labels$moa_v1 <- labels$moa
labels$moa_v1[which(labels$moa %in% group)] <- group_name
labels_v1 <- left_join(labels,file_info, by = c("rdkit_graph"="rdkit"))
labels_v1 <- labels_v1 %>% mutate(test_labels = if_else(condition = (moa_v1 == group_name),true = group_name,false = "nada"))
if (original_big_group != "") {
labels_v1 <- labels_v1 %>%
mutate(test_labels = if_else(condition = (moa == original_big_group),true = original_big_group,false = test_labels))
}
if (label_space_only) {
emb_test <- emb[which(emb$emb %in% labels_v1$emb),]
}
emb_test <- left_join(emb_test,labels_v1,by="emb")
if (cell_specific) {
emb_test <- emb_test[which(as.character(emb_test$cell_id) %in% cell_line),]
}
print(nrow(emb_test))
tsne_test <- Rtsne(scale(emb_test[,2:(emb_size+1)]), dims = 2, perplexity=tsne_perpl, verbose=TRUE, max_iter = 2000,initial_dims = init_dim)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(emb_test$test_labels))
colors <- c( "#E69F00","#999999", "#56B4E9")
names(colors) <- c(as.character(original_big_group),"nada",as.character(group_name))
gtsne <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
png(file=paste0(output_dir,"/",as.character(group_name),"tsne.png"),width=9,height=9,units = "in",res=300)
print(gtsne)
dev.off()
umap.defaults$n_neighbors <- umap_n
map_test <- umap(scale(emb_test[,2:(emb_size+1)]))
df_map <- data.frame(V1 = map_test$layout[,1], V2 = map_test$layout[,2], label = as.factor(emb_test$test_labels))
gmap <- ggplot(df_map, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
png(file=paste0(output_dir,"/",as.character(group_name),"umap.png"),width=9,height=9,units = "in",res=300)
print(gmap)
dev.off()
emb_test <- left_join(emb_test,file_info,by = "emb")
emb_test <- left_join(emb_test,sig_map,by=c("sig_id.y"="sig_id2"))
if (genes) {
emb_genes <- get_cmap_signatures(as.character(emb_test$sig_id),cmap_path_to_gctx = ds_path,landmark = T, landmark_df = landmark)
emb_genes <- t(emb_genes)
emb_genes <- as.data.frame(emb_genes) %>% rownames_to_column("sig_id")
tsne_genes <- Rtsne(scale(emb_genes[,2:ncol(emb_genes)]), dims = 2, perplexity=tsne_perpl_genes, verbose=TRUE, max_iter = 1000,initial_dims = init_dim_genes)
df_tsne_genes <- data.frame(V1 = tsne_genes$Y[,1], V2 =tsne_genes$Y[,2], label = as.factor(emb_test$test_labels))
gtsne_genes <- ggplot(df_tsne_genes, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
map_genes <- umap(scale(emb_genes[,2:ncol(emb_genes)]))
df_map_genes <- data.frame(V1 = map_genes$layout[,1], V2 = map_genes$layout[,2], label = as.factor(emb_test$test_labels))
gmap_genes <- ggplot(df_map_genes, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
png(file=paste0(output_dir,"/",as.character(group_name),"tsne_genes.png"),width=9,height=9,units = "in",res=300)
print(gtsne_genes)
dev.off()
png(file=paste0(output_dir,"/",as.character(group_name),"umap_genes.png"),width=9,height=9,units = "in",res=300)
print(gmap_genes)
dev.off()
}
}
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
# embs
emb <- read.csv("embeddings/graph2vec/emb_clustered_1500.csv")
colnames(emb)[1] <- "emb"
emb$emb[1]
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
labels <- readRDS("data/cmap/labels.rds")
dna_rna_damage <- c("topoisomerase inhibitor","RNA synthesis inhibitor|topoisomerase inhibitor",
"chelating agent|topoisomerase inhibitor","RNA synthesis inhibitor","DNA synthesis inhibitor",
"DNA alkylating agent","DNA alkylating agent|DNA synthesis inhibitor","DNA inhibitor",
"DNA replication inhibitor|STAT inhibitor")
group_name <- "dna_rna_damage"
output_dir <- paste0("group_check/",as.character(group_name))
obg = "topoisomerase inhibitor"
group_check(group = dna_rna_damage,group_name = "dna_rna_damage",original_big_group = obg,
labels = labels, emb_test = emb,file_info = file_info,emb_size = 128,
output_dir = output_dir, label_space_only = F, tsne_perpl = 88, init_dim = 50,umap_n = 50, cell_specific = F,cell_line = "A375",
genes = T,
ds_path = ds_path, landmark = landmark, sig_map = sig_map, tsne_perpl_genes = 50, init_dim_genes = 50)
sig_map <- readRDS("data/graph_info_df/sig_mapping.rds")
group_check <- function(group,group_name,original_big_group,
labels,emb_test,file_info,emb_size,output_dir,
label_space_only, tsne_perpl, umap_n,
cell_specific,cell_line,genes, ds_path,
landmark,sig_map,tsne_perpl_genes, init_dim, init_dim_genes){
library(tidyverse)
library(clustree)
library(Rtsne)
library(ggplot2)
library(umap)
get_cmap_signatures <- function(cmap_path_to_gctx, sig_ids, landmark = TRUE, landmark_df = NULL) {
library(tidyverse)
library(cmapR)
library(rhdf5)
library(AnnotationDbi)
library(org.Hs.eg.db)
ds_path <- cmap_path_to_gctx
if (landmark == TRUE) {
cmap_gctx <- parse.gctx(ds_path,rid = as.character(landmark_df$`Entrez ID`), cid = sig_ids)
cmap <- cmap_gctx@mat
cmap <- cmap[as.character(landmark_df$`Entrez ID`),]
rownames(cmap) <- landmark_df$Symbol
}
if (landmark == FALSE) {
cmap_gctx <- parse.gctx(ds_path, cid = sig_ids)
cmap <- cmap_gctx@mat
entrez <- rownames(cmap)
anno <- AnnotationDbi::select(org.Hs.eg.db,
keys = entrez,
columns = c("SYMBOL", "GENENAME","ENTREZID"),
keytype = "ENTREZID")
anno <- anno %>%
filter(!is.na(SYMBOL))
cmap <- cmap[anno$ENTREZID,]
rownames(cmap) <- anno$SYMBOL
}
return(cmap)
}
dir.create(output_dir,recursive = T)
labels$moa_v1 <- labels$moa
labels$moa_v1[which(labels$moa %in% group)] <- group_name
labels_v1 <- left_join(labels,file_info, by = c("rdkit_graph"="rdkit"))
labels_v1 <- labels_v1 %>% mutate(test_labels = if_else(condition = (moa_v1 == group_name),true = group_name,false = "nada"))
if (original_big_group != "") {
labels_v1 <- labels_v1 %>%
mutate(test_labels = if_else(condition = (moa == original_big_group),true = original_big_group,false = test_labels))
}
if (label_space_only) {
emb_test <- emb[which(emb$emb %in% labels_v1$emb),]
}
emb_test <- left_join(emb_test,labels_v1,by="emb")
if (cell_specific) {
emb_test <- emb_test[which(as.character(emb_test$cell_id) %in% cell_line),]
}
print(nrow(emb_test))
tsne_test <- Rtsne(scale(emb_test[,2:(emb_size+1)]), dims = 2, perplexity=tsne_perpl, verbose=TRUE, max_iter = 1000,initial_dims = init_dim)
df_test <- data.frame(V1 = tsne_test$Y[,1], V2 =tsne_test$Y[,2], label = as.factor(emb_test$test_labels))
colors <- c( "#E69F00","#999999", "#56B4E9")
names(colors) <- c(as.character(original_big_group),"nada",as.character(group_name))
gtsne <- ggplot(df_test, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
png(file=paste0(output_dir,"/",as.character(group_name),"tsne.png"),width=9,height=9,units = "in",res=300)
print(gtsne)
dev.off()
umap.defaults$n_neighbors <- umap_n
map_test <- umap(scale(emb_test[,2:(emb_size+1)]))
df_map <- data.frame(V1 = map_test$layout[,1], V2 = map_test$layout[,2], label = as.factor(emb_test$test_labels))
gmap <- ggplot(df_map, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
png(file=paste0(output_dir,"/",as.character(group_name),"umap.png"),width=9,height=9,units = "in",res=300)
print(gmap)
dev.off()
emb_test <- left_join(emb_test,file_info,by = "emb")
emb_test <- left_join(emb_test,sig_map,by=c("sig_id.y"="sig_id2"))
if (genes) {
emb_genes <- get_cmap_signatures(as.character(emb_test$sig_id),cmap_path_to_gctx = ds_path,landmark = T, landmark_df = landmark)
emb_genes <- t(emb_genes)
emb_genes <- as.data.frame(emb_genes) %>% rownames_to_column("sig_id")
tsne_genes <- Rtsne(scale(emb_genes[,2:ncol(emb_genes)]), dims = 2, perplexity=tsne_perpl_genes, verbose=TRUE, max_iter = 1000,initial_dims = init_dim_genes)
df_tsne_genes <- data.frame(V1 = tsne_genes$Y[,1], V2 =tsne_genes$Y[,2], label = as.factor(emb_test$test_labels))
gtsne_genes <- ggplot(df_tsne_genes, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
map_genes <- umap(scale(emb_genes[,2:ncol(emb_genes)]))
df_map_genes <- data.frame(V1 = map_genes$layout[,1], V2 = map_genes$layout[,2], label = as.factor(emb_test$test_labels))
gmap_genes <- ggplot(df_map_genes, aes(V1, V2))+
geom_point(aes(color = label),show.legend = T) + scale_color_manual(values=colors)
png(file=paste0(output_dir,"/",as.character(group_name),"tsne_genes.png"),width=9,height=9,units = "in",res=300)
print(gtsne_genes)
dev.off()
png(file=paste0(output_dir,"/",as.character(group_name),"umap_genes.png"),width=9,height=9,units = "in",res=300)
print(gmap_genes)
dev.off()
}
}
group_check(group = dna_rna_damage,group_name = "dna_rna_damage",original_big_group = obg,
labels = labels, emb_test = emb,file_info = file_info,emb_size = 128,
output_dir = output_dir, label_space_only = F, tsne_perpl = 88, init_dim = 50,umap_n = 50, cell_specific = F,cell_line = "A375",
genes = T,
ds_path = ds_path, landmark = landmark, sig_map = sig_map, tsne_perpl_genes = 50, init_dim_genes = 50)
# embs
emb <- read.csv("embeddings/graph2vec/emb_activity_1_epoch.csv")
colnames(emb)[1] <- "emb"
emb$emb
# file info
file_info <- readRDS("data/graph_info_df/file_info_nodups.rds")
file_info <- file_info %>% dplyr::select(files_combined,sig_id,rdkit,cell_id,count.x,emb)
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
file_info <- file_info[which(as.character(file_info$emb) %in% as.character(emb$emb)),]
file_info <- file_info %>% group_by(sig_id) %>% sample_n(1) %>% ungroup()
emb <- emb[which(as.character(emb$emb) %in% as.character(file_info$emb)),]
labels <- readRDS("data/cmap/labels.rds")
ds_path <- "C:/Users/user/Documents/phd/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx"
landmark <- read_tsv(file = "data/cmap/util_files/cmap_landmark_genes.txt")
sig_map <- readRDS("data/graph_info_df/sig_mapping.rds")
group_check(group = dna_rna_damage,group_name = "dna_rna_damage",original_big_group = obg,
labels = labels, emb_test = emb,file_info = file_info,emb_size = 128,
output_dir = output_dir, label_space_only = F, tsne_perpl = 88, init_dim = 50,umap_n = 50, cell_specific = F,cell_line = "A375",
genes = T,
ds_path = ds_path, landmark = landmark, sig_map = sig_map, tsne_perpl_genes = 50, init_dim_genes = 50)
View(labels)
moa_v1 <- labels %>% group_by(moa_v1) %>% summarise(count = n()) %>% arrange(desc(count))
View(moa_v1)
k <- seq(1,60)
clusters <- matrix(666,nrow = nrow(emb),ncol = length(k))
colnames(clusters) <- as.character(k)
wss <- NULL
for (i in 1:length(k)) {
test <- kmeans(scale(emb[,-1]),centers = k[i],nstart = 50,iter.max = 40)
clusters[,i] <- test$cluster
colnames(clusters)[i] <- paste0("k",k[i])
wss[i] <- test$tot.withinss
}
group_name <- "dna_rna_damage"
output_dir <- paste0("group_check/",as.character(group_name))
obg = "topoisomerase inhibitor"
group_check(group = dna_rna_damage,group_name = "dna_rna_damage",original_big_group = obg,
labels = labels, emb_test = emb,file_info = file_info,emb_size = 128,
output_dir = output_dir, label_space_only = F, tsne_perpl = 88, init_dim = 50,umap_n = 50, cell_specific = T,cell_line = "A375",
genes = T,
ds_path = ds_path, landmark = landmark, sig_map = sig_map, tsne_perpl_genes = 50, init_dim_genes = 50)
group_check(group = dna_rna_damage,group_name = "dna_rna_damage",original_big_group = obg,
labels = labels, emb_test = emb,file_info = file_info,emb_size = 128,
output_dir = output_dir, label_space_only = F, tsne_perpl = 5, init_dim = 50,umap_n = 50, cell_specific = T,cell_line = "A375",
genes = T,
ds_path = ds_path, landmark = landmark, sig_map = sig_map, tsne_perpl_genes = 5, init_dim_genes = 50)
